import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'


// Load properties file which is located in the project directory of the specific schema
project.ext.createSchemaProperties = new Properties()
project(':schema-tasks-topic').file('createSchema.properties').withInputStream { project.createSchemaProperties.load(it) }

// Get the suffix of the schema directory (if any)
def schemaSuffix = ''
if ( project.property('schemaDirName').split('schema_').size() > 1 ) {
    schemaSuffix = '_' + project.property('schemaDirName').split('schema_').getAt(1)
}

// Get the schema name either from the properties file if it's set,
// or construct the schema name from the topic directory name and the schema directory suffix
// (This uses the Elvis operator, http://groovy-lang.org/operators.html#_elvis_operator)
def schema = createSchemaProperties.getProperty('schemaName') ?: project.property('topicName') + schemaSuffix
def schemaVersion = createSchemaProperties.getProperty('schemaVersion') as Integer
if (!schemaVersion) {
    throw new Exception("The schemaVersion property is missing")
}
project.ext.set('schemaName', "${schema}_v${schemaVersion}".toString())

def dbName
// Take the dbName property if it's set and if it's not null
if ( project.hasProperty('dbName') && project.dbName) {
    dbName = project.property('dbName')
} else {
    // Determine the DB name from the createSchema Property file or use the default ('edit')
    def databases = createSchemaProperties.getProperty('databases') ?: 'edit'
    // TODO: Translate. Plus improve Exception message.
    // Wenn mehrere DBs im Properties File angegeben sind, kann das build.gradle dies nicht selber handeln.
    // Stattdessen muss man das Skript nochmals aufrufen und die Property dbName übergeben (z.B. -PdbName=my_db).
    // Und dann nochmals für die weiteren DBs.
    if (databases.split(',').size() == 1) {
        dbName = databases
    } else {
        throw new Exception("Multiple databases defined in property file: ${databases}. Please pass the dbName property specifying which DB to choose.")
    }
}

if ( dbName == 'edit' ) {
    project.ext.dbUri = project.property('dbUriEdit')
    project.ext.dbUser = project.property('dbUserEdit')
    project.ext.dbPwd = project.property('dbPwdEdit')
} else if ( dbName == 'pub' ) {
    project.ext.dbUri = project.property('dbUriPub')
    project.ext.dbUser = project.property('dbUserPub')
    project.ext.dbPwd = project.property('dbPwdPub')
} else {
    throw new Exception("No DB connection parameters defined for DB ${dbName}")
}

// Decide if the role names need a suffix (this is the case when a schema is to be placed in multiple DBs)
// And set the role suffix as extra property (empty string is the default suffix)
project.ext.set('roleSfx', '')
if ( createSchemaProperties.getProperty('databases') && createSchemaProperties.getProperty('databases').split(',').size()> 1 ) {
    project.ext.set('roleSfx', "_${dbName}db".toString())
}



task dropSchemaShared(type: SqlExecutor) {
    group = 'Drop schema'
    description = 'Drop DB schema and schema roles (roles for reading from and writing to the DB schema)'
    doLast {
        println "DB schema ${project.schemaName} and schema roles dropped"
    }
    database = [project.dbUri, project.dbUser, project.dbPwd]
    sqlFiles = ['drop_schema.sql', 'drop_role.sql']
    sqlParameters = [dbSchema: project.schemaName, roleSuffix: project.roleSfx]
}

task createEmptySchemaShared(type: SqlExecutor) {
    group = 'Create schema'
    description = 'Create empty DB schema and schema roles (roles for reading from and writing to the DB schema)'
    doLast {
        println "DB schema ${project.schemaName} and schema roles created"
    }
    database = [project.dbUri, project.dbUser, project.dbPwd]
    sqlFiles = ['create_schema.sql', 'create_role.sql']
    sqlParameters = [dbSchema: project.schemaName, roleSuffix: project.roleSfx]
}

task createSchemaShared(type: Ili2pgImportSchema) {
    group = 'Create schema'
    description = 'Create tables in schema according to INTERLIS model'
    dependsOn 'createEmptySchemaShared'
    doLast {
        println "Tables in DB schema ${project.schemaName} created according to INTERLIS model"
    }
    database = [project.dbUri, project.dbUser, project.dbPwd]
    dbschema = project.schemaName
    models = project.createSchemaProperties.getProperty('models')
    // uses the Elvis operator, http://groovy-lang.org/operators.html#_elvis_operator
    defaultSrsCode = project.createSchemaProperties.getProperty('defaultSrsCode') ?: 2056
    createGeomIdx = project.createSchemaProperties.getProperty('createGeomIdx') ?: true
    createFk = project.createSchemaProperties.getProperty('createFk') ?: true
    createFkIdx = project.createSchemaProperties.getProperty('createFkIdx') ?: true
    createUnique = project.createSchemaProperties.getProperty('createUnique') ?: true
    createEnumTabs = project.createSchemaProperties.getProperty('createEnumTabs') ?: true
    beautifyEnumDispName = project.createSchemaProperties.getProperty('beautifyEnumDispName') ?: true
    createMetaInfo = project.createSchemaProperties.getProperty('createMetaInfo') ?: true
    createNumChecks = project.createSchemaProperties.getProperty('createNumChecks') ?: true
    nameByTopic = project.createSchemaProperties.getProperty('nameByTopic') ?: true
    strokeArcs = project.createSchemaProperties.getProperty('strokeArcs') ?: true
    // TODO: createImportTabs = true ?
    createBasketCol = project.createSchemaProperties.getProperty('createBasketCol') ?: false
    createDatasetCol = project.createSchemaProperties.getProperty('createDatasetCol') ?: false
}

task configureSchemaShared(type: SqlExecutor) {
    group = 'Configure schema'
    description = 'Set comment on schema, grant permissions, and more'
    doLast {
        println "DB schema ${project.schemaName} configured"
    }
    database = [project.dbUri, project.dbUser, project.dbPwd]
    sqlFiles = [project(':schema-tasks-topic').file('comment_on_schema.sql').getPath()]
    sqlParameters = [dbSchema: project.schemaName]
}
